{"/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/test.js":"/* istanbul instrument in package npmtest_protractor_html_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/lib.npmtest_protractor_html_screenshot_reporter.js":"/* istanbul instrument in package npmtest_protractor_html_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_protractor_html_screenshot_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_protractor_html_screenshot_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-protractor-html-screenshot-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_protractor_html_screenshot_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_protractor_html_screenshot_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_protractor_html_screenshot_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_protractor_html_screenshot_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_protractor_html_screenshot_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_protractor_html_screenshot_reporter.__dirname + '/lib.npmtest_protractor_html_screenshot_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/node_modules/protractor-html-screenshot-reporter/index.js":"var util = require('./lib/util')\r\n\t, mkdirp = require('mkdirp')\r\n\t, _ = require('underscore')\r\n\t, path = require('path');\r\n\r\n/** Function: defaultPathBuilder\r\n * This function builds paths for a screenshot file. It is appended to the\r\n * constructors base directory and gets prependend with `.png` or `.json` when\r\n * storing a screenshot or JSON meta data file.\r\n *\r\n * Parameters:\r\n *     (Object) spec - The spec currently reported\r\n *     (Array) descriptions - The specs and their parent suites descriptions\r\n *     (Object) result - The result object of the current test spec.\r\n *     (Object) capabilities - WebDrivers capabilities object containing\r\n *                             in-depth information about the Selenium node\r\n *                             which executed the test case.\r\n *\r\n * Returns:\r\n *     (String) containing the built path\r\n */\r\nfunction defaultPathBuilder(spec, descriptions, results, capabilities) {\r\n\treturn util.generateGuid();\r\n}\r\n\r\n/** Function: defaultMetaDataBuilder\r\n * Uses passed information to generate a meta data object which can be saved\r\n * along with a screenshot.\r\n * You do not have to add the screenshots file path since this will be appended\r\n * automatially.\r\n *\r\n * Parameters:\r\n *     (Object) spec - The spec currently reported\r\n *     (Array) descriptions - The specs and their parent suites descriptions\r\n *     (Object) result - The result object of the current test spec.\r\n *     (Object) capabilities - WebDrivers capabilities object containing\r\n *                             in-depth information about the Selenium node\r\n *                             which executed the test case.\r\n *\r\n * Returns:\r\n *     (Object) containig meta data to store along with a screenshot\r\n */\r\nfunction defaultMetaDataBuilder(spec, descriptions, results, capabilities) {\r\n\tvar metaData = {\r\n\t\t\tdescription: descriptions.join(' ')\r\n\t\t\t, passed: results.passed()\r\n\t\t\t, os: capabilities.caps_.platform\r\n\t\t\t, browser: {\r\n\t\t\t\tname: capabilities.caps_.browserName\r\n\t\t\t\t, version: capabilities.caps_.version\r\n\t\t\t}\r\n\t\t};\r\n\tif(results.items_.length > 0) {\r\n\t\tvar result = results.items_[0];\r\n\t\tif(!results.passed()){\r\n\t\t\tvar failedItem = _.where(results.items_,{passed_: false})[0];\r\n\t\t\tif(failedItem){\r\n\t\t\t\tmetaData.message = failedItem.message || 'Failed';\r\n\t\t\t\tmetaData.trace = failedItem.trace? (failedItem.trace.stack || 'No Stack trace information') : 'No Stack trace information';\r\n\t\t\t}\r\n\r\n\t\t}else{\r\n\t\t\tmetaData.message = result.message || 'Passed';\r\n\t\t\tmetaData.trace = result.trace.stack;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn metaData;\r\n}\r\n\r\n\r\n\r\n/** Class: ScreenshotReporter\r\n * Creates a new screenshot reporter using the given `options` object.\r\n *\r\n * For more information, please look at the README.md file.\r\n *\r\n * Parameters:\r\n *     (Object) options - Object with options as described below.\r\n *\r\n * Possible options:\r\n *     (String) baseDirectory - The path to the directory where screenshots are\r\n *                              stored. If not existing, it gets created.\r\n *                              Mandatory.\r\n *     (Function) pathBuilder - A function which returns a path for a screenshot\r\n *                              to be stored. Optional.\r\n *     (Function) metaDataBuilder - Function which returns an object literal\r\n *                                  containing meta data to store along with\r\n *                                  the screenshot. Optional.\r\n *     (Boolean) takeScreenShotsForSkippedSpecs - Do you want to capture a\r\n *                                                screenshot for a skipped spec?\r\n *                                                Optional (default: false).\r\n */\r\nfunction ScreenshotReporter(options) {\r\n\toptions = options || {};\r\n\tif(!options.baseDirectory || options.baseDirectory.length === 0) {\r\n\t\tthrow new Error('Please pass a valid base directory to store the ' +\r\n\t\t\t'screenshots into.');\r\n\t} else {\r\n\t\tthis.baseDirectory = options.baseDirectory;\r\n\t}\r\n\r\n\tif(typeof (options.cssOverrideFile) !== 'undefined' && _.isString(options.cssOverrideFile) ){\r\n\t\tthis.cssOverrideFile = options.cssOverrideFile;\r\n\t} else {\r\n\t\tthis.cssOverrideFile = null;\r\n\t}\r\n\r\n\tthis.pathBuilder = options.pathBuilder || defaultPathBuilder;\r\n\tthis.disableMetaData = options.disableMetaData || false;\r\n\tthis.combinedJsonFileName = options.combinedJsonFileName || 'combined.json';\r\n\tthis.docTitle = options.docTitle || 'Generated test report';\r\n\tthis.docHeader = options.docHeader || 'Test Results';\r\n\tthis.docName = options.docName || 'report.html';\r\n\tthis.metaDataBuilder = options.metaDataBuilder || defaultMetaDataBuilder;\r\n\tthis.preserveDirectory = options.preserveDirectory || false;\r\n\tthis.takeScreenShotsForSkippedSpecs =\r\n\t\toptions.takeScreenShotsForSkippedSpecs || false;\r\n\t\tthis.takeScreenShotsOnlyForFailedSpecs =\r\n \t\toptions.takeScreenShotsOnlyForFailedSpecs || false;\r\n \tthis.finalOptions = {\r\n \t\ttakeScreenShotsOnlyForFailedSpecs: this.takeScreenShotsOnlyForFailedSpecs,\r\n \t\ttakeScreenShotsForSkippedSpecs: this.takeScreenShotsForSkippedSpecs,\r\n \t\tmetaDataBuilder: this.metaDataBuilder,\r\n \t\tpathBuilder: this.pathBuilder,\r\n \t\tdisableMetaData: this.disableMetaData,\r\n \t\tcombinedJsonFileName: this.combinedJsonFileName,\r\n \t\tbaseDirectory: this.baseDirectory,\r\n \t\tdocTitle: this.docTitle,\r\n \t\tdocHeader: this.docHeader,\r\n \t\tdocName: this.docName,\r\n \t\tcssOverrideFile: this.cssOverrideFile\r\n \t};\r\n\r\n \tif(!this.preserveDirectory){\r\n \t\tutil.removeDirectory(this.finalOptions.baseDirectory);\r\n \t}\r\n}\r\n\r\n/** Function: reportSpecResults\r\n * Called by Jasmine when reporting results for a test spec. It triggers the\r\n * whole screenshot capture process and stores any relevant information.\r\n *\r\n * Parameters:\r\n *     (Object) spec - The test spec to report.\r\n */\r\nScreenshotReporter.prototype.reportSpecResults =\r\nfunction reportSpecResults(spec) {\r\n\t/* global browser */\r\n\tvar self = this\r\n\t\t, results = spec.results()\r\n\t\t, takeScreenshot\r\n\t\t, finishReport;\r\n\r\n\tif(!self.takeScreenShotsForSkippedSpecs && results.skipped) {\r\n\t\treturn;\r\n\t}\r\n\r\n\ttakeScreenshot = !(self.takeScreenShotsOnlyForFailedSpecs && results.passed());\r\n\r\n\tfinishReport = function(png) {\r\n\r\n\t\tbrowser.getCapabilities().then(function (capabilities) {\r\n\t\t\tvar descriptions = util.gatherDescriptions(\r\n\t\t\t\t\tspec.suite\r\n\t\t\t\t\t, [spec.description]\r\n\t\t\t\t)\r\n\r\n\r\n\t\t\t\t, baseName = self.pathBuilder(\r\n\t\t\t\t\tspec\r\n\t\t\t\t\t, descriptions\r\n\t\t\t\t\t, results\r\n\t\t\t\t\t, capabilities\r\n\t\t\t\t)\r\n\t\t\t\t, metaData = self.metaDataBuilder(\r\n\t\t\t\t\tspec\r\n\t\t\t\t\t, descriptions\r\n\t\t\t\t\t, results\r\n\t\t\t\t\t, capabilities\r\n\t\t\t\t)\r\n\r\n\t\t\t\t, screenShotFile = baseName + '.png'\r\n\t\t\t\t, metaFile = baseName + '.json'\r\n\t\t\t\t, screenShotPath = path.join(self.baseDirectory, screenShotFile)\r\n\t\t\t\t, metaDataPath = path.join(self.baseDirectory, metaFile)\r\n\r\n\t\t\t\t// pathBuilder can return a subfoldered path too. So extract the\r\n\t\t\t\t// directory path without the baseName\r\n\t\t\t\t, directory = path.dirname(screenShotPath);\r\n\r\n\t\t\tmetaData.screenShotFile = screenShotFile;\r\n\t\t\tmkdirp(directory, function(err) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\tthrow new Error('Could not create directory ' + directory);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tutil.addMetaData(metaData, metaDataPath, descriptions, self.finalOptions);\r\n\t\t\t\t\tif(takeScreenshot) {\r\n\t\t\t\t\t\tutil.storeScreenShot(png, screenShotPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!self.finalOptions.disableMetaData) {\r\n\t\t\t\t\t\tutil.storeMetaData(metaData, metaDataPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t};\r\n\r\n\tif (takeScreenshot) {\r\n\r\n\t\tbrowser.takeScreenshot().then(function (png) {\r\n\t\t\tfinishReport(png);\r\n\t\t});\r\n\r\n\t} else {\r\n\r\n\t\tfinishReport();\r\n\r\n\t}\r\n\r\n\r\n};\r\n\r\nmodule.exports = ScreenshotReporter;\r\n","/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/node_modules/protractor-html-screenshot-reporter/lib/util.js":"var fs = require('fs')\r\n\t, path = require('path')\r\n\t, jsonParser = require('./jsonparser')\r\n\t, crypto = require('crypto');\r\n\r\n\r\n\r\n/** Function: storeScreenShot\r\n * Stores base64 encoded PNG data to the file at the given path.\r\n *\r\n * Parameters:\r\n *     (String) data - PNG data, encoded in base64\r\n *     (String) file - Target file path\r\n */\r\nfunction storeScreenShot(data, file) {\r\n\tvar stream = fs.createWriteStream(file);\r\n\r\n\tstream.write(new Buffer(data, 'base64'));\r\n\tstream.end();\r\n}\r\n\r\n\r\nfunction addHTMLReport(jsonData, baseName, options){\r\n\tvar basePath = path.dirname(baseName),\r\n\t\thtmlFile = path.join(basePath, options.docName),\r\n\t\tstream;\r\n\r\n\tstream = fs.createWriteStream(htmlFile);\r\n\tstream.write(jsonParser.processJson(jsonData, options));\r\n\tstream.end();\r\n\r\n}\r\n\r\nfunction addMetaData(metaData, baseName, descriptions, options){\r\n\tvar json,\r\n\t\tstream,\r\n\t\tbasePath = path.dirname(baseName),\r\n\t\tfile = path.join(basePath, options.combinedJsonFileName);\r\n\ttry {\r\n\t\tmetaData.description = descriptions.join('|');\r\n\t\tjson = metaData;\r\n\t\tvar currentData;\r\n\t\ttry{\r\n\t\t\tcurrentData = JSON.parse(fs.readFileSync(file, {\r\n\t\t\t\tencoding: 'utf8'\r\n\t\t\t}));\r\n\t\t\tif(currentData.length && currentData.length>0){\r\n\t\t\t\tcurrentData.push(json);\r\n\t\t\t}\r\n\t\t\tjson = currentData;\r\n\t\t}catch(e){\r\n\t\t\tjson = [json];\r\n\t\t}\r\n\t\tstream = fs.createWriteStream(file);\r\n\t\tstream.write(JSON.stringify(json));\r\n\t\tstream.end();\r\n\r\n\t\taddHTMLReport(json, baseName, options);\r\n\t} catch(e) {\r\n\t\tconsole.error('Could not save meta data');\r\n\t}\r\n\r\n}\r\n\r\n/** Function: storeMetaData\r\n * Converts the metaData object to a JSON string and stores it to the file at\r\n * the given path.\r\n *\r\n * Parameters:\r\n *     (Object) metaData - Object to save as JSON\r\n *     (String) file - Target file path\r\n */\r\nfunction storeMetaData(metaData, file) {\r\n\tvar json\r\n\t\t, stream;\r\n\r\n\ttry {\r\n\t\tjson = JSON.stringify(metaData);\r\n\t\tstream = fs.createWriteStream(file);\r\n\r\n\t\tstream.write(json);\r\n\t\tstream.end();\r\n\t} catch(e) {\r\n\t\tconsole.error('Could not save meta data for ' + file);\r\n\t}\r\n}\r\n\r\n/** Function: gatherDescriptions\r\n * Traverses the parent suites of a test spec recursivly and gathers all\r\n * descriptions. Finally returns them as an array.\r\n *\r\n * Example:\r\n * If your test file has the following structure, this function returns an\r\n * array like ['My Tests', 'Module 1', 'Case A'] when executed for `Case A`:\r\n *\r\n *     describe('My Tests', function() {\r\n *         describe('Module 1', function() {\r\n *             it('Case A', function() { /* ... * / });\r\n *         });\r\n *     });\r\n *\r\n * Parameters:\r\n *     (Object) suite - Test suite\r\n *     (Array) soFar - Already gathered descriptions. On first call, pass an\r\n *                     array containing the specs description itself.\r\n *\r\n * Returns:\r\n *     (Array) containing the descriptions of all parental suites and the suite\r\n *             itself.\r\n */\r\nfunction gatherDescriptions(suite, soFar) {\r\n\tsoFar.push(suite.description);\r\n\r\n\tif(suite.parentSuite) {\r\n\t\treturn gatherDescriptions(suite.parentSuite, soFar);\r\n\t} else {\r\n\t\treturn soFar;\r\n\t}\r\n}\r\n\r\n/** Function: generateGuid\r\n * Generates a GUID using node.js' crypto module.\r\n *\r\n * Returns:\r\n *     (String) containing a guid\r\n */\r\nfunction generateGuid() {\r\n    var buf = new Uint16Array(8);\r\n    buf = crypto.randomBytes(8);\r\n    var S4 = function(num) {\r\n            var ret = num.toString(16);\r\n            while(ret.length < 4){\r\n                    ret = \"0\"+ret;\r\n            }\r\n            return ret;\r\n    };\r\n\r\n    return (\r\n            S4(buf[0])+S4(buf[1])+\"-\"+S4(buf[2])+\"-\"+S4(buf[3])+\"-\"+\r\n            S4(buf[4])+\"-\"+S4(buf[5])+S4(buf[6])+S4(buf[7])\r\n    );\r\n}\r\n\r\nfunction removeDirectory(dirPath){\r\n\ttry { var files = fs.readdirSync(dirPath); }\r\n      catch(e) { return; }\r\n      if (files.length > 0)\r\n        for (var i = 0; i < files.length; i++) {\r\n          var filePath = dirPath + '/' + files[i];\r\n          if (fs.statSync(filePath).isFile())\r\n            fs.unlinkSync(filePath);\r\n          else\r\n            removeDirectory(filePath);\r\n        }\r\n      fs.rmdirSync(dirPath);\r\n};\r\n\r\nmodule.exports = {\r\n\tstoreScreenShot: storeScreenShot\r\n\t, storeMetaData: storeMetaData\r\n\t, gatherDescriptions: gatherDescriptions\r\n\t, generateGuid: generateGuid\r\n\t, addMetaData: addMetaData\r\n\t, removeDirectory: removeDirectory\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-protractor-html-screenshot-reporter/node_modules/protractor-html-screenshot-reporter/lib/jsonparser.js":"var _ = require('underscore'),\r\n    path = require('path'),\r\n    reporterOptions;\r\n\r\n//create a namespace for these functions, so they do not conflict with other scripts\r\nvar phssr = phssr ? phssr : {};\r\n\r\nphssr.makeScriptTag = function(){\r\n    var scrpTag = \"<script type='text/javascript'>\";\r\n    scrpTag +=\"function showTrace(event){\";\r\n    scrpTag +=\"event.target.parentElement.getElementsByClassName('traceinfo')[0].className = 'traceinfo visible';}\";\r\n    scrpTag +=\"function closeTraceModal(event){\";\r\n    scrpTag +=\"event.target.parentElement.parentElement.className = 'traceinfo';}\";\r\n    scrpTag +=\"function openModal(imageSource){\";\r\n    scrpTag +=\"var myWindow = window.open('','screenshotWindow');\";\r\n    scrpTag +=\"myWindow.document.write('<img src=\\\"' +imageSource + '\\\" alt=\\\"screenshot\\\" />');}\";\r\n    scrpTag += \"</script>\";\r\n    return scrpTag;\r\n};\r\n\r\nphssr.makeHardCodedStyleTag = function(reporterOptions){\r\n    var styleTag = \"<style>\";\r\n    styleTag+= \"body{font-family:Arial};\";\r\n    styleTag+= \"ul,li{margin-left:0;padding-left:0;width:100%;font-weight:bold;}\";\r\n    styleTag+= \"table{width:95%;text-align:left;border-spacing:0;border-collapse: separate;margin-bottom:5px;}\";\r\n    styleTag+= \"li{font-weight:bold;padding-left:5px;list-style:none;}\";\r\n    styleTag+= \"ul table li{font-weight: normal}\";\r\n    styleTag+= \"th,td{padding: 10px;border: 1px solid #000;}\";\r\n    styleTag+= \"td.desc-col{width:400px;}th.desc-col{width: 390px;}\";\r\n    styleTag+= \"td.status-col{width:75px;}th.status-col{width: 75px;}\";\r\n    styleTag+= \"td.browser-col{width:345px;}th.browser-col{width: 345px;}\";\r\n    styleTag+= \"td.os-col{width:100px;}th.os-col{width: 100px;}\";\r\n    styleTag+= \"td.msg-col{width:135px;}th.msg-col{width: 135px;}\";\r\n    styleTag+= \"table.header{background-color: gray; color: #fff;margin-left:20px;}\";\r\n    styleTag+= \".traceinfo{position: fixed;top: 0; bottom: 0;left: 0;right:0;background: rgba(0,0,0,0.8);z-index: 99999;opacity:0;-webkit-transition: opacity 400ms ease-in;transition: opacity 400ms ease-in;pointer-events: none;}\";\r\n    styleTag+= \".traceinfo.visible{opacity:1;pointer-events: auto;}\";\r\n    styleTag+= \".traceinfo > div{width: 400px;position: relative;margin: 10% auto;padding: 5px 20px 13px 20px;background: #fff;}\";\r\n    styleTag+= \".traceinfo .close{background: #606061;color: #FFFFFF;line-height: 25px;position: absolute;right: -12px;text-align: center;top: -10px;width: 24px;text-decoration: none;font-weight: bold;}\";\r\n    styleTag+= \".traceinfo .close:hover{background: #00d9ff;}\";\r\n    styleTag+= \"</style>\";\r\n\r\n    //Can override all styles with a CSS file\r\n    if(reporterOptions.cssOverrideFile){\r\n         styleTag = '<link href=\"' + reporterOptions.cssOverrideFile + '\" rel=\"stylesheet\" type=\"text/css\"/>';\r\n    }\r\n\r\n    return styleTag;\r\n}\r\n\r\nphssr.makeHTMLPage = function(tableHtml, reporterOptions){\r\n    var styleTag = phssr.makeHardCodedStyleTag(reporterOptions);\r\n    var scrpTag = phssr.makeScriptTag();\r\n\r\n    var staticHTMLContentprefix = \"<html><head><meta charset='utf-8'/>\";\r\n\r\n    //Add title if it was in config setup\r\n    if (typeof (reporterOptions.docTitle) !== 'undefined' && _.isString(reporterOptions.docTitle) ){\r\n        staticHTMLContentprefix += \"<title>\" + reporterOptions.docTitle + \"</title>\";\r\n    } else {\r\n        staticHTMLContentprefix += \"<title></title>\";\r\n    }\r\n\r\n    staticHTMLContentprefix +=  styleTag + scrpTag + \" </head><body>\";\r\n    staticHTMLContentprefix +=  \"<h1>\" + reporterOptions.docHeader + \"</h1><table class='header'>\";\r\n    staticHTMLContentprefix +=  \"<tr><th class='desc-col'>Description</th><th class='status-col'>Passed</th>\";\r\n    staticHTMLContentprefix +=  \"<th class='browser-col'>Browser</th>\";\r\n    staticHTMLContentprefix +=  \"<th class='os-col'>OS</th><th class='msg-col'>Message</th>\";\r\n    staticHTMLContentprefix +=  \"<th class='img-col'>Screenshot</th></tr></table>\";\r\n\r\n    var staticHTMLContentpostfix = \"</body></html>\";\r\n    var htmlComplete = staticHTMLContentprefix + tableHtml + staticHTMLContentpostfix;\r\n\r\n    return htmlComplete;\r\n}\r\n\r\n\r\nvar passCount=0, failCount=0, loopCount=0;\r\nfunction generateHTML(data){\r\n    data.passed? passCount++: failCount++;\r\n    var str = '<table><tr>';\r\n    str +=  '<td class=\"desc-col\">' + data.desc + '</td>';\r\n    var bgColor = data.passed? 'green': 'red';\r\n    str +=  '<td class=\"status-col\" style=\"color:#fff;background-color: '+ bgColor+'\">' + data.passed + '</td>';\r\n    str +=  '<td class=\"browser-col\">' + data.browser.name+ ':' +data.browser.version + '</td>';\r\n    str +=  '<td class=\"os-col\">' + data.os + '</td>';\r\n    var stackTraceInfo = data.passed? '': '<br/><a onclick=\"showTrace(event)\" href=\"#trace-modal'+loopCount+'\">View Stack Trace Info</a><br/> <div id=\"#trace-modal'+loopCount+'\" class=\"traceinfo\"><div><a href=\"#close\" onclick=\"closeTraceModal(event)\" title=\"Close\" class=\"close\">X</a>' + data.trace + '</div></div>';\r\n\r\n    str +=  '<td class=\"msg-col\">' + data.message+ stackTraceInfo+ '</td>';\r\n\r\n    if(!(reporterOptions.takeScreenShotsOnlyForFailedSpecs && data.passed)) {\r\n        str +=  '<td class=\"img-col\"><a href=\"#\" onclick=\"openModal(\\'' + path.basename(data.screenShotFile)+ '\\')\">View </a></td>';\r\n    }\r\n    else{\r\n        str +=  '<td class=\"img-col\"></td>';\r\n    }\r\n\r\n    str += '</tr></table>';\r\n    loopCount++;\r\n    return str;\r\n\r\n}\r\n\r\nfunction findDeep(items, attrs) {\r\n\r\n    function match(value) {\r\n        for (var key in attrs) {\r\n            if (attrs[key] !== value[key]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function traverse(value) {\r\n        var result;\r\n\r\n        _.forEach(value, function (val) {\r\n            if (val && match(val)) {\r\n                result = val;\r\n                return false;\r\n            }\r\n\r\n            if (_.isObject(val) || _.isArray(val)) {\r\n                result = traverse(val);\r\n            }\r\n\r\n            if (result) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return traverse(items);\r\n\r\n}\r\n\r\nvar formattedJson = [];\r\nvar currentFormattedDataIndex = 0;\r\n\r\nfunction formatData(element, descArr) {\r\n    if (currentFormattedDataIndex === descArr.length - 1) {\r\n        var lastValueWithContent = {\r\n            desc: descArr[currentFormattedDataIndex],\r\n            level: currentFormattedDataIndex,\r\n            description: element.description,\r\n            passed: element.passed,\r\n            os: element.os,\r\n            browser: element.browser,\r\n            message: element.message,\r\n            trace: element.trace,\r\n            screenShotFile: element.screenShotFile\r\n        };\r\n        var parentDataForFinalValue = findDeep(formattedJson, {\r\n            desc: descArr[currentFormattedDataIndex - 1],\r\n            level: currentFormattedDataIndex - 1\r\n        });\r\n        if (parentDataForFinalValue) {\r\n            parentDataForFinalValue.children = parentDataForFinalValue.children || [];\r\n            parentDataForFinalValue.children.push(lastValueWithContent);\r\n        }\r\n\r\n        currentFormattedDataIndex = 0;\r\n    } else {\r\n        var currentdata = {\r\n            desc: descArr[currentFormattedDataIndex],\r\n            level: currentFormattedDataIndex\r\n        };\r\n        var existingDataWithSameConf = findDeep(formattedJson, currentdata);\r\n        if (!existingDataWithSameConf) {\r\n            if (currentFormattedDataIndex === 0) {\r\n                currentdata.depth = descArr.length;\r\n                formattedJson.push(currentdata);\r\n            } else {\r\n                var parentData = findDeep(formattedJson, {\r\n                    desc: descArr[currentFormattedDataIndex - 1],\r\n                    level: currentFormattedDataIndex - 1\r\n                });\r\n                if (parentData) {\r\n                    parentData.children = parentData.children || [];\r\n                    parentData.children.push(currentdata);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        currentFormattedDataIndex++;\r\n        formatData(element, descArr);\r\n    }\r\n\r\n}\r\n\r\nfunction processJson(jsonData, options){\r\n    passCount=0;\r\n    failCount = 0;\r\n    reporterOptions = options;\r\n    var jsonStr = \"<ul>\";\r\n    formattedJson = [];\r\n    currentFormattedDataIndex = 0;\r\n\r\n    _.each(jsonData, function (value) {\r\n        var descArr = value.description.split('|').reverse();\r\n        if (descArr.length > 0) {\r\n            formatData(value, descArr);\r\n        }\r\n    });\r\n\r\n\r\n\r\n    function parseJSON(element) {\r\n        if(element.children){\r\n\r\n            jsonStr += '<li>'+element.desc+ '<ul>';\r\n            element.children.forEach(function (child, index, childArr) {\r\n                if (child.children) {\r\n                    parseJSON(child);\r\n                }else{\r\n                    var ss = generateHTML(child);\r\n                    jsonStr += '<li>' + ss +'</li>';\r\n                    if(index === childArr.length-1){\r\n                        jsonStr += '</ul></li>';\r\n                    }\r\n                }\r\n            });\r\n            return jsonStr;\r\n        }\r\n\r\n    }\r\n\r\n    var tableHtml = \"\";\r\n    formattedJson.forEach(function (element) {\r\n        jsonStr = \"\";\r\n        tableHtml += parseJSON(element);\r\n        tableHtml += new Array(element.depth-1).join('</ul></li>');\r\n\r\n    });\r\n    tableHtml = '<ul>' + tableHtml + '</ul>';\r\n    tableHtml += \"<div><h2><u>Results summary</u></h2>\";\r\n    tableHtml += \"<b>Total tests passed</b>: \"+ passCount +\" <br/> <b>Total tests failed</b>: \"+ failCount +\" <br/> This report generated on \"+new Date()+\" </div>\";\r\n\r\n    // //updating the document title\r\n    // var docTitleRegex = new RegExp('{{reportTitle}}');\r\n    // staticHTMLContentprefix =  staticHTMLContentprefix.replace(docTitleRegex, reporterOptions.docTitle);\r\n    // return staticHTMLContentprefix + tableHtml + staticHTMLContentpostfix;\r\n    var finalHtml = phssr.makeHTMLPage(tableHtml, reporterOptions);\r\n    return finalHtml;\r\n}\r\n\r\nmodule.exports = {\r\n    processJson: processJson\r\n};\r\n"}